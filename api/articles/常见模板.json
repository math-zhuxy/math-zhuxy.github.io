{"title":"常见模板","uid":"5eedc39c4343d9a40153c05972544dcd","slug":"常见模板","date":"2024-11-21T08:24:29.000Z","updated":"2024-11-21T08:41:45.541Z","comments":true,"path":"api/articles/常见模板.json","keywords":null,"cover":null,"content":"<h1 id=\"并查集\"><a href=\"#并查集\" class=\"headerlink\" title=\"并查集\"></a>并查集</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">10010</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> p[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x!=p[x])p[x]=<span class=\"built_in\">find</span>(p[x]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p[x];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"STL库\"><a href=\"#STL库\" class=\"headerlink\" title=\"STL库\"></a>STL库</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">priority_queue&lt;<span class=\"type\">int</span>, vector&lt;<span class=\"type\">int</span>&gt;&gt; maxHeap; <span class=\"comment\">//大根堆</span></span><br><span class=\"line\">priority_queue&lt;<span class=\"type\">int</span>, vector&lt;<span class=\"type\">int</span>&gt;, greater&lt;<span class=\"type\">int</span>&gt;&gt; minHeap; <span class=\"comment\">//小根堆</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*vector删除操作*/</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> it=arr.<span class=\"built_in\">begin</span>();it!=arr.<span class=\"built_in\">end</span>();)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(...)arr.<span class=\"built_in\">erase</span>(it);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> it++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*map操作 */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\">map&lt;<span class=\"type\">int</span>,<span class=\"type\">int</span>&gt;mp;</span><br><span class=\"line\">mp[a]++;<span class=\"comment\">//插入</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(mp[a]==<span class=\"number\">0</span>)&#123;...&#125;<span class=\"comment\">//查找</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"先序-中序-后序遍历\"><a href=\"#先序-中序-后序遍历\" class=\"headerlink\" title=\"先序+中序&#x2F;后序遍历\"></a>先序+中序&#x2F;后序遍历</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">f</span><span class=\"params\">(<span class=\"type\">int</span> m, <span class=\"type\">int</span> n, <span class=\"type\">int</span> p, <span class=\"type\">int</span> q)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (m &gt; n || p &gt; q) <span class=\"keyword\">return</span>; </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (m &lt; <span class=\"number\">0</span> || n &gt;= a.<span class=\"built_in\">size</span>() || p &lt; <span class=\"number\">0</span> || q &gt;= b.<span class=\"built_in\">size</span>()) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> x=...<span class=\"comment\">// 具体操作 </span></span><br><span class=\"line\">    <span class=\"built_in\">f</span>(m, x - <span class=\"number\">1</span>, p, p + (x - <span class=\"number\">1</span> - m));<span class=\"comment\">// 递归构造左子树 </span></span><br><span class=\"line\">    <span class=\"built_in\">f</span>(x + <span class=\"number\">1</span>, n, p + (x - <span class=\"number\">1</span> - m) + <span class=\"number\">1</span>, q - <span class=\"number\">1</span>);<span class=\"comment\">// 递归构造右子树</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"插入二叉树\"><a href=\"#插入二叉树\" class=\"headerlink\" title=\"插入二叉树\"></a>插入二叉树</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">NODE* <span class=\"title\">insert</span><span class=\"params\">(NODE* root, <span class=\"type\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"literal\">nullptr</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">NODE</span>(val); <span class=\"comment\">// 如果当前节点为空，插入</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (val &lt; root-&gt;val) root-&gt;left = <span class=\"built_in\">insert</span>(root-&gt;left, val); <span class=\"comment\">// 小于当前节点数值，则应该插入左子树中</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> root-&gt;right = <span class=\"built_in\">insert</span>(root-&gt;right, val);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">NODE* head=<span class=\"literal\">nullptr</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)head=<span class=\"built_in\">insert</span>(head,arr[i]);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"BFS遍历每一层\"><a href=\"#BFS遍历每一层\" class=\"headerlink\" title=\"BFS遍历每一层\"></a>BFS遍历每一层</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">bfs</span><span class=\"params\">(NODE head)</span></span>&#123;</span><br><span class=\"line\">    queue&lt;NODE&gt;q;</span><br><span class=\"line\">    q.<span class=\"built_in\">push</span>(head);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!q.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> a=q.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"comment\">// 操作</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; a; ++i) &#123;</span><br><span class=\"line\">            NODE* node = q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">            q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (node-&gt;left) q.<span class=\"built_in\">push</span>(node-&gt;left);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (node-&gt;right) q.<span class=\"built_in\">push</span>(node-&gt;right);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"单调队列\"><a href=\"#单调队列\" class=\"headerlink\" title=\"单调队列\"></a>单调队列</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">getans</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    deque&lt;<span class=\"type\">int</span>&gt;q; <span class=\"comment\">//滑动窗口</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.<span class=\"built_in\">size</span>(); i++)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//维护队列单调性（递增）</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!q.<span class=\"built_in\">empty</span>()&amp;&amp;nums[q.<span class=\"built_in\">back</span>()]&lt;nums[i])q.<span class=\"built_in\">pop_back</span>();</span><br><span class=\"line\">        q.<span class=\"built_in\">push_back</span>(i);<span class=\"comment\">//入队</span></span><br><span class=\"line\">        <span class=\"comment\">// 操作</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"KMP\"><a href=\"#KMP\" class=\"headerlink\" title=\"KMP\"></a>KMP</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> n, m;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">100010</span>, M = <span class=\"number\">1000010</span>;</span><br><span class=\"line\"><span class=\"type\">char</span> p[N], s[M];</span><br><span class=\"line\"><span class=\"type\">int</span> ne[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tcin &gt;&gt; n &gt;&gt; p + <span class=\"number\">1</span> &gt;&gt; m &gt;&gt; s + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">2</span>, j = <span class=\"number\">0</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (j &amp;&amp; p[i] != p[j + <span class=\"number\">1</span>])j = ne[j];</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (p[i] == p[j + <span class=\"number\">1</span>])j++;</span><br><span class=\"line\">\t\tne[i] = j;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>, j = <span class=\"number\">0</span>; i &lt;= m; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (j &amp;&amp; s[i] != p[j + <span class=\"number\">1</span>])j = ne[j];</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (s[i] == p[j + <span class=\"number\">1</span>])j++;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (j == n)&#123;</span><br><span class=\"line\">\t\t    <span class=\"comment\">//找到后的操作</span></span><br><span class=\"line\">\t\t    j=ne[j];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","feature":true,"text":"并查集123456const int N = 10010;int p[N];int find(int x){ if(x!=p[x])p[x]=find(p[x]...","permalink":"/post/常见模板","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"算法","slug":"算法","count":15,"path":"api/tags/算法.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%B9%B6%E6%9F%A5%E9%9B%86\"><span class=\"toc-text\">并查集</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#STL%E5%BA%93\"><span class=\"toc-text\">STL库</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%85%88%E5%BA%8F-%E4%B8%AD%E5%BA%8F-%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86\"><span class=\"toc-text\">先序+中序&#x2F;后序遍历</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%8F%92%E5%85%A5%E4%BA%8C%E5%8F%89%E6%A0%91\"><span class=\"toc-text\">插入二叉树</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#BFS%E9%81%8D%E5%8E%86%E6%AF%8F%E4%B8%80%E5%B1%82\"><span class=\"toc-text\">BFS遍历每一层</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97\"><span class=\"toc-text\">单调队列</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#KMP\"><span class=\"toc-text\">KMP</span></a></li></ol>","author":{"name":"Math-zhuxy","slug":"blog-author","avatar":"https://sse-market-source-1320172928.cos.ap-guangzhou.myqcloud.com/src/images/uploads/1728918801765528128_%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20241014222719.jpg","link":"/","description":"Blood of the First Men, drawn by the sword.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{},"next_post":{"title":"MST","uid":"ac69b4c1992072269abea91444d26b98","slug":"MST","date":"2024-11-21T01:56:04.000Z","updated":"2024-11-21T08:21:55.038Z","comments":true,"path":"api/articles/MST.json","keywords":null,"cover":null,"text":"MST定义设 $G=(V,E)$ 是一个无向连通图，$E$ 中的每个权值 $c(u,v)$ ，称为 $(u,v)$ 的边长。图 $G$ 的生成树( $n-1$ ...","permalink":"/post/MST","photos":[],"count_time":{"symbolsCount":"3.5k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"算法","slug":"算法","count":15,"path":"api/tags/算法.json"}],"author":{"name":"Math-zhuxy","slug":"blog-author","avatar":"https://sse-market-source-1320172928.cos.ap-guangzhou.myqcloud.com/src/images/uploads/1728918801765528128_%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20241014222719.jpg","link":"/","description":"Blood of the First Men, drawn by the sword.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}