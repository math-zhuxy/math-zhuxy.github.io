{"title":"不同形态二叉树","uid":"9b21adb62cab940774eff10a8ca336dc","slug":"不同形态二叉树","date":"2024-11-23T10:49:25.000Z","updated":"2024-11-23T10:49:13.874Z","comments":true,"path":"api/articles/不同形态二叉树.json","keywords":null,"cover":null,"content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><h2 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h2><p>给定前序遍历和后序遍历的顺序，求出总共有多少棵不同形态的二叉树满足这样的遍历顺序。</p>\n<h2 id=\"输入格式\"><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h2><p>整个输入有两行，第一行给出前序遍历的访问顺序，第二行给出后序遍历的访问顺序。</p>\n<p>二叉树的结点用一个大写字母表示，不会有两个结点标上相同字母。输入数据不包含空格，且保证至少有一棵二叉树符合要求。</p>\n<h2 id=\"输出格式\"><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h2><p>输出一个整数，为符合要求的不同形态二叉树的数目。</p>\n<h2 id=\"样例输入\"><a href=\"#样例输入\" class=\"headerlink\" title=\"样例输入\"></a>样例输入</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ABCD</span><br><span class=\"line\">CBDA</span><br></pre></td></tr></table></figure>\n<h2 id=\"样例输出\"><a href=\"#样例输出\" class=\"headerlink\" title=\"样例输出\"></a>样例输出</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2</span><br></pre></td></tr></table></figure>\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><ol>\n<li>树的数量&#x3D;左子树数量 * 右子树数量，根据这个方法递归，注意考虑子树为空的情况。</li>\n<li>每个先序序列都唯一地对应一个后序序列，可以用map来存已经计算过的先序序列</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"type\">int</span>,<span class=\"type\">int</span>&gt;PII;</span><br><span class=\"line\">map&lt;PII,<span class=\"type\">int</span>&gt;mp;</span><br><span class=\"line\">string pre, post;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">solve</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b, <span class=\"type\">int</span> c, <span class=\"type\">int</span> d)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (a == b) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (mp[&#123;a,b&#125;] != <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> mp[&#123;a,b&#125;];</span><br><span class=\"line\">\t<span class=\"type\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> len = <span class=\"number\">0</span>; len &lt;= b - a; len++) &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> al = a + <span class=\"number\">1</span>, ar = a + len;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> all = c, alr = c + len - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> bl = a + len + <span class=\"number\">1</span>, br = b;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> arl = c + len, arr = d - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (len == <span class=\"number\">0</span> &amp;&amp; pre[bl] == post[arr])res += <span class=\"built_in\">solve</span>(bl, br, arl, arr);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (len == b - a &amp;&amp; pre[al] == post[alr])res += <span class=\"built_in\">solve</span>(al, ar, all, alr);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"number\">0</span> &lt; len &amp;&amp; len &lt; b - a &amp;&amp; pre[al] == post[alr] &amp;&amp; pre[bl] == post[arr])res += <span class=\"built_in\">solve</span>(al, ar, all, alr) * <span class=\"built_in\">solve</span>(bl, br, arl, arr);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tmp[&#123;a,b&#125;] = res;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\tcin &gt;&gt; pre &gt;&gt; post;</span><br><span class=\"line\">\t<span class=\"type\">int</span> n = pre.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"built_in\">solve</span>(<span class=\"number\">0</span>, n - <span class=\"number\">1</span>, <span class=\"number\">0</span>, n - <span class=\"number\">1</span>) &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","feature":true,"text":"题目描述给定前序遍历和后序遍历的顺序，求出总共有多少棵不同形态的二叉树满足这样的遍历顺序。 输入格式整个输入有两行，第一行给出前序遍历的访问顺序，第二行给出后序...","permalink":"/post/不同形态二叉树","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"例题","slug":"例题","count":1,"path":"api/tags/例题.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE\"><span class=\"toc-text\">题目</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8F%8F%E8%BF%B0\"><span class=\"toc-text\">描述</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%85%A5%E6%A0%BC%E5%BC%8F\"><span class=\"toc-text\">输入格式</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%87%BA%E6%A0%BC%E5%BC%8F\"><span class=\"toc-text\">输出格式</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A0%B7%E4%BE%8B%E8%BE%93%E5%85%A5\"><span class=\"toc-text\">样例输入</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A0%B7%E4%BE%8B%E8%BE%93%E5%87%BA\"><span class=\"toc-text\">样例输出</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E9%A2%98%E8%A7%A3\"><span class=\"toc-text\">题解</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%9D%E8%B7%AF\"><span class=\"toc-text\">思路</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">代码</span></a></li></ol></li></ol>","author":{"name":"Math-zhuxy","slug":"blog-author","avatar":"https://sse-market-source-1320172928.cos.ap-guangzhou.myqcloud.com/src/images/uploads/1728918801765528128_%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20241014222719.jpg","link":"/","description":"Blood of the First Men, drawn by the sword.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{},"next_post":{"title":"常见模板","uid":"5eedc39c4343d9a40153c05972544dcd","slug":"常见模板","date":"2024-11-21T08:24:29.000Z","updated":"2024-11-23T10:51:56.632Z","comments":true,"path":"api/articles/常见模板.json","keywords":null,"cover":null,"text":"并查集123456const int N = 10010;int p[N];int find(int x){ if(x!=p[x])p[x]=find(p[x]...","permalink":"/post/常见模板","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"算法","slug":"算法","count":15,"path":"api/tags/算法.json"}],"author":{"name":"Math-zhuxy","slug":"blog-author","avatar":"https://sse-market-source-1320172928.cos.ap-guangzhou.myqcloud.com/src/images/uploads/1728918801765528128_%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20241014222719.jpg","link":"/","description":"Blood of the First Men, drawn by the sword.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}