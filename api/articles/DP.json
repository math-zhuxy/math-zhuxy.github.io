{"title":"DP","uid":"25ed3aa3446c2c64cf6228f9f4e4f9c4","slug":"DP","date":"2024-10-15T10:12:39.000Z","updated":"2024-10-16T09:23:40.651Z","comments":true,"path":"api/articles/DP.json","keywords":null,"cover":null,"content":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>DP是一个非常广泛的题目类型。比较难的DP题目一般都很抽象，很难提取出DP数组出来，这边文章也只是笼统的介绍一下DP，并介绍一个DP最经典最简单的例子。<br>:::warning 定义<br>动态规划（Dynamic Programming）：简称 DP，是一种求解多阶段决策过程最优化问题的方法。在动态规划中，通过把原问题分解为相对简单的子问题，先求解子问题，再由子问题的解而得到原问题的解。<br>:::</p>\n<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><h2 id=\"背包问题\"><a href=\"#背包问题\" class=\"headerlink\" title=\"背包问题\"></a>背包问题</h2><p>背包问题（Knapsack Problem）是一个经典的组合优化问题，通常用于决策与资源分配场景。其基本描述如下：</p>\n<p>在给定的物品集合中，每个物品都有其特定的重量和价值。背包问题的目标是在不超过背包最大承载重量的情况下，选择一组物品，使得所选物品的总价值最大化。</p>\n<p>背包问题的主要变种包括：</p>\n<ol>\n<li><p><strong>0-1背包问题</strong>（0&#x2F;1 Knapsack Problem）：每个物品只能选择一次，要么放入背包，要么不放入。</p>\n</li>\n<li><p><strong>完全背包问题</strong>（Complete Knapsack Problem）：每个物品可以选择多次，可以放入背包多次。</p>\n</li>\n<li><p><strong>分数背包问题</strong>（Fractional Knapsack Problem）：物品可以被分割，允许选择物品的一部分，通常用贪心算法解决。</p>\n</li>\n</ol>\n<p>背包问题可以用动态规划、贪心算法或回溯法等多种方法进行求解。其数学模型可以表示为：</p>\n<ul>\n<li><p><strong>目标函数</strong>：最大化 ( \\sum_{i&#x3D;1}^{n} v_i x_i )</p>\n</li>\n<li><p><strong>约束条件</strong>： ( \\sum_{i&#x3D;1}^{n} w_i x_i \\leq W )</p>\n</li>\n</ul>\n<p>其中，( v_i ) 为第 ( i ) 个物品的价值，( w_i ) 为第 ( i ) 个物品的重量，( x_i ) 为第 ( i ) 个物品是否被选取的二元变量（0 或 1），( W ) 为背包的最大承载重量。<br><strong>问题求解（以完全背包问题为例）</strong></p>\n<p>给定 ( n ) 种物品，每种物品的价值为 ( v_i )（( i &#x3D; 1, 2, \\ldots, n )），重量为 ( w_i )，以及一个最大承载重量 ( W )。目标是选择物品，使得在不超过最大承载重量的前提下，总价值最大化。</p>\n<ol>\n<li><p><strong>状态定义</strong>：</p>\n<ul>\n<li>定义一个一维数组 <code>dp</code>，其中 <code>dp[j]</code> 表示在重量为 ( j ) 时能获得的最大价值。</li>\n</ul>\n</li>\n<li><p><strong>状态转移方程</strong>：</p>\n<ul>\n<li>对于每一种物品 ( i ) 和每个可能的背包容量 ( j )：<br>[<br>dp[j] &#x3D; \\max(dp[j], dp[j - w_i] + v_i)<br>]</li>\n<li>这里，<code>dp[j - w_i] + v_i</code> 表示将第 ( i ) 种物品加入背包后所能获得的价值，而 <code>dp[j]</code> 是不选择该物品的价值。通过比较二者，可以得到最大值。</li>\n</ul>\n</li>\n<li><p><strong>初始化</strong>：</p>\n<ul>\n<li>初始化 <code>dp[0] = 0</code>，表示当背包容量为 0 时的最大价值为 0。</li>\n<li>其他 <code>dp[j]</code> 初始值设为 0。</li>\n</ul>\n</li>\n<li><p><strong>遍历顺序</strong>：</p>\n<ul>\n<li>对于每个物品 ( i )，从 <code>w_i</code> 到 ( W ) 遍历容量 <code>j</code>，因为允许重复选择同一物品。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"算法步骤\"><a href=\"#算法步骤\" class=\"headerlink\" title=\"算法步骤\"></a>算法步骤</h3><ol>\n<li>初始化 <code>dp</code> 数组。</li>\n<li>对于每种物品 ( i ):<ul>\n<li>遍历背包容量 ( j ) 从 ( w_i ) 到 ( W )：<ul>\n<li>更新 <code>dp[j]</code> 根据状态转移方程。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>最终，<code>dp[W]</code> 即为在最大重量为 ( W ) 时的最大价值。</li>\n</ol>\n<h3 id=\"时间复杂度\"><a href=\"#时间复杂度\" class=\"headerlink\" title=\"时间复杂度\"></a>时间复杂度</h3><p>动态规划算法的时间复杂度为 ( O(nW) )，其中 ( n ) 是物品的数量，( W ) 是背包的最大承载重量。</p>\n<h3 id=\"示例代码（Python）\"><a href=\"#示例代码（Python）\" class=\"headerlink\" title=\"示例代码（Python）\"></a>示例代码（Python）</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">complete_knapsack</span>(<span class=\"params\">weights, values, W</span>):</span><br><span class=\"line\">    n = <span class=\"built_in\">len</span>(weights)</span><br><span class=\"line\">    dp = [<span class=\"number\">0</span>] * (W + <span class=\"number\">1</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(weights[i], W + <span class=\"number\">1</span>):</span><br><span class=\"line\">            dp[j] = <span class=\"built_in\">max</span>(dp[j], dp[j - weights[i]] + values[i])</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> dp[W]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"小试牛刀\"><a href=\"#小试牛刀\" class=\"headerlink\" title=\"小试牛刀\"></a>小试牛刀</h2><h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>你面临 $n$ 名参赛者的挑战，最终要将他们全部战胜。<br>每一轮中，都会淘汰一些选手；你会得到这一轮奖金池中 被淘汰者 除以 这一轮对手总数 比例的奖金。  </p>\n<p>例如某一轮有 $10$ 个对手，淘汰了 $3$ 个，那么你将获得奖金池中 $3&#x2F;10$ 的奖金。  </p>\n<p>假设每一轮的奖金池均为一元，<code>Mirko</code> 希望通过恰好 $k$ 轮赢得比赛，那么他最多可能获得多少奖金呢？   </p>\n<p>你只需要输出答案保留 $9$ 位小数即可。</p>\n<h3 id=\"输入格式\"><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h3><p>一行两个正整数 $n,k$。</p>\n<h3 id=\"输出格式\"><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h3><p>输出一行一个实数表示答案。</p>\n<h3 id=\"样例-1\"><a href=\"#样例-1\" class=\"headerlink\" title=\"样例 #1\"></a>样例 #1</h3><h3 id=\"样例输入-1\"><a href=\"#样例输入-1\" class=\"headerlink\" title=\"样例输入 #1\"></a>样例输入 #1</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5 3</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"样例输出-1\"><a href=\"#样例输出-1\" class=\"headerlink\" title=\"样例输出 #1\"></a>样例输出 #1</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2.100000000</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"样例-2\"><a href=\"#样例-2\" class=\"headerlink\" title=\"样例 #2\"></a>样例 #2</h3><h4 id=\"样例输入-2\"><a href=\"#样例输入-2\" class=\"headerlink\" title=\"样例输入 #2\"></a>样例输入 #2</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">10 10</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"样例输出-2\"><a href=\"#样例输出-2\" class=\"headerlink\" title=\"样例输出 #2\"></a>样例输出 #2</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2.928968254</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"提示\"><a href=\"#提示\" class=\"headerlink\" title=\"提示\"></a>提示</h3><h4 id=\"样例1解释：\"><a href=\"#样例1解释：\" class=\"headerlink\" title=\"样例1解释：\"></a>样例1解释：</h4><p>最优的情况为：<br>第一轮淘汰 $3$ 人，剩下两轮各淘汰 $1$ 人。<br>获得奖金为 $\\frac{3}{5}+\\frac{1}{2}+\\frac{1}{1}&#x3D;2.1$ 元。</p>\n<h4 id=\"数据范围：\"><a href=\"#数据范围：\" class=\"headerlink\" title=\"数据范围：\"></a>数据范围：</h4><p>对于$20%$的数据，$1\\le n\\le 100$。</p>\n<p>对于$40%$的数据，$1\\le n \\le 3000$。</p>\n<p>对于$100%$的数据，$1\\le k \\le n \\le 10^5$。</p>\n<p>本题较卡精度，请留意。</p>\n<h3 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h3><h4 id=\"DP-公式与斜率优化\"><a href=\"#DP-公式与斜率优化\" class=\"headerlink\" title=\"DP 公式与斜率优化\"></a>DP 公式与斜率优化</h4><p>定义</p>\n<p>设 ( dp[i][k] ) 为当前淘汰了 ( i ) 人，已经进行 ( k ) 轮的答案。</p>\n<p>状态转移方程</p>\n<p>显然有：<br>[<br>dp[i][k] &#x3D; \\min(dp[j][k-1] + \\frac{i - j}{n - j})<br>]<br>其中：</p>\n<ul>\n<li>( i - j ) 为当前轮淘汰人数，</li>\n<li>( n - j ) 为当前轮总人数。</li>\n</ul>\n<p>斜率优化</p>\n<p>注意这里是求最大值：<br>[<br>(dp[j_2][k-1] - \\frac{j_2}{n - j_2}) + \\frac{i}{n - j_2} \\geq (dp[j_1][k-1] - \\frac{j_1}{n - j_1}) + \\frac{i}{n - j_1}<br>]</p>\n<p>可以转化为：<br>[<br>(dp[j_2][k-1] - \\frac{j_2}{n - j_2}) - (dp[j_1][k-1] - \\frac{j_1}{n - j_1}) \\geq i \\cdot \\left(\\frac{1}{n - j_1} - \\frac{1}{n - j_2}\\right)<br>]</p>\n<p>定义 ( Y(i) ) 和 ( X(i) )</p>\n<p>令：<br>[<br>Y(i) &#x3D; dp[i][k-1] - \\frac{i}{n - i}<br>]<br>[<br>X(i) &#x3D; \\frac{n - i}{1}<br>]</p>\n<p>优化后的不等式</p>\n<p>有：<br>[<br>Y(j_2) - Y(j_1) \\geq i \\cdot (X(j_1) - X(j_2))<br>]</p>\n<p>化简为：<br>[<br>Y(j_2) - Y(j_1) \\leq -i \\cdot (X(j_2) - X(j_1))<br>]</p>\n<p>这个式子方便判断凸的方向。</p>\n<h4 id=\"wqs-二分法\"><a href=\"#wqs-二分法\" class=\"headerlink\" title=\"wqs 二分法\"></a>wqs 二分法</h4><p>先不考虑 ( k ) 轮的限制，显然可以直接计算。</p>\n<p>使用斜率为 ( k_0 ) 的直线 ( l ) 去切由轮数为 1 到 ( n ) 的最优解组成的上凸包。</p>\n<h4 id=\"切点与截距\"><a href=\"#切点与截距\" class=\"headerlink\" title=\"切点与截距\"></a>切点与截距</h4><p>切点为 ( (k, g(k)) )，满足 ( k ) 轮的条件，( g(k) ) 为 ( k ) 轮时的最优解。</p>\n<p>设：<br>[<br>f(k) &#x3D; g(k) - k_0 \\cdot x<br>]</p>\n<p>我们取到最大的 ( f(k) )。</p>\n<p>注意到进行了 ( k ) 段，减去了 ( k \\cdot x )，那么 ( f(k) ) 相当于每段的贡献减 ( k ) 的答案。</p>\n<h4 id=\"二分-k-0\"><a href=\"#二分-k-0\" class=\"headerlink\" title=\"二分 ( k_0 )\"></a>二分 ( k_0 )</h4><p>最终答案为：<br>[<br>g(k) &#x3D; f(k_0) + k_0 \\cdot k<br>]</p>\n<p>因为有点卡精度，所以将除法移到右边变成乘法：<br>[<br>Y(j_2) - Y(j_1) \\geq -i \\cdot (X(j_1) - X(j_2))<br>]</p>\n<p>队尾处理同理。</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> eps 1e-18</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"type\">double</span> f[<span class=\"number\">100010</span>];</span><br><span class=\"line\"><span class=\"type\">int</span> q[<span class=\"number\">100010</span>],hd,tl;</span><br><span class=\"line\"><span class=\"type\">int</span> s[<span class=\"number\">100010</span>],n,k;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">double</span> <span class=\"title\">X</span><span class=\"params\">(<span class=\"type\">int</span> i)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">1.0</span>/(<span class=\"type\">long</span> <span class=\"type\">double</span>)(n-i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">double</span> <span class=\"title\">Y</span><span class=\"params\">(<span class=\"type\">int</span> i)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> f[i]-(<span class=\"type\">long</span> <span class=\"type\">double</span>)i/(n-i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">check</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">double</span> mid)</span></span>&#123;</span><br><span class=\"line\">\thd=<span class=\"number\">1</span>,tl=<span class=\"number\">0</span>;</span><br><span class=\"line\">\tq[++tl]=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(hd&lt;tl&amp;&amp;<span class=\"built_in\">Y</span>(q[hd<span class=\"number\">+1</span>])-<span class=\"built_in\">Y</span>(q[hd])&gt;=-i*(<span class=\"built_in\">X</span>(q[hd<span class=\"number\">+1</span>])-<span class=\"built_in\">X</span>(q[hd]))) hd++;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> j=q[hd];</span><br><span class=\"line\">\t\ts[i]=s[j]<span class=\"number\">+1</span>;</span><br><span class=\"line\">\t\tf[i]=f[j]+(<span class=\"type\">long</span> <span class=\"type\">double</span>)(i-j)/(n-j)-mid;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(hd&lt;tl&amp;&amp;(<span class=\"built_in\">Y</span>(q[tl])-<span class=\"built_in\">Y</span>(q[tl<span class=\"number\">-1</span>]))*(<span class=\"built_in\">X</span>(i)-<span class=\"built_in\">X</span>(q[tl<span class=\"number\">-1</span>]))&lt;=(<span class=\"built_in\">Y</span>(i)-<span class=\"built_in\">Y</span>(q[tl<span class=\"number\">-1</span>]))*(<span class=\"built_in\">X</span>(q[tl])-<span class=\"built_in\">X</span>(q[tl<span class=\"number\">-1</span>]))) tl--;</span><br><span class=\"line\">\t\tq[++tl]=i;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> s[n]&lt;=k;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;n,&amp;k);</span><br><span class=\"line\">\t<span class=\"type\">long</span> <span class=\"type\">double</span> l=<span class=\"number\">0</span>,r=<span class=\"number\">1</span>,mid;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(l&lt;r-eps)&#123;</span><br><span class=\"line\">\t\tmid=(l+r)/<span class=\"number\">2.0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"built_in\">check</span>(mid)) r=mid;<span class=\"comment\">//被减的越多段数就越少</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> l=mid;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%.9Lf&quot;</span>,f[n]+mid*k);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","text":"简介DP是一个非常广泛的题目类型。比较难的DP题目一般都很抽象，很难提取出DP数组出来，这边文章也只是笼统的介绍一下DP，并介绍一个DP最经典最简单的例子。::...","permalink":"/post/DP","photos":[],"count_time":{"symbolsCount":"4.3k","symbolsTime":"4 mins."},"categories":[],"tags":[{"name":"算法","slug":"算法","count":3,"path":"api/tags/算法.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">简介</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE\"><span class=\"toc-text\">题目</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">背包问题</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AE%97%E6%B3%95%E6%AD%A5%E9%AA%A4\"><span class=\"toc-text\">算法步骤</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6\"><span class=\"toc-text\">时间复杂度</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81%EF%BC%88Python%EF%BC%89\"><span class=\"toc-text\">示例代码（Python）</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B0%8F%E8%AF%95%E7%89%9B%E5%88%80\"><span class=\"toc-text\">小试牛刀</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0\"><span class=\"toc-text\">题目描述</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%85%A5%E6%A0%BC%E5%BC%8F\"><span class=\"toc-text\">输入格式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%87%BA%E6%A0%BC%E5%BC%8F\"><span class=\"toc-text\">输出格式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A0%B7%E4%BE%8B-1\"><span class=\"toc-text\">样例 #1</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A0%B7%E4%BE%8B%E8%BE%93%E5%85%A5-1\"><span class=\"toc-text\">样例输入 #1</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%A0%B7%E4%BE%8B%E8%BE%93%E5%87%BA-1\"><span class=\"toc-text\">样例输出 #1</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A0%B7%E4%BE%8B-2\"><span class=\"toc-text\">样例 #2</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%A0%B7%E4%BE%8B%E8%BE%93%E5%85%A5-2\"><span class=\"toc-text\">样例输入 #2</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%A0%B7%E4%BE%8B%E8%BE%93%E5%87%BA-2\"><span class=\"toc-text\">样例输出 #2</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8F%90%E7%A4%BA\"><span class=\"toc-text\">提示</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%A0%B7%E4%BE%8B1%E8%A7%A3%E9%87%8A%EF%BC%9A\"><span class=\"toc-text\">样例1解释：</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E8%8C%83%E5%9B%B4%EF%BC%9A\"><span class=\"toc-text\">数据范围：</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%A2%98%E8%A7%A3\"><span class=\"toc-text\">题解</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#DP-%E5%85%AC%E5%BC%8F%E4%B8%8E%E6%96%9C%E7%8E%87%E4%BC%98%E5%8C%96\"><span class=\"toc-text\">DP 公式与斜率优化</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#wqs-%E4%BA%8C%E5%88%86%E6%B3%95\"><span class=\"toc-text\">wqs 二分法</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%88%87%E7%82%B9%E4%B8%8E%E6%88%AA%E8%B7%9D\"><span class=\"toc-text\">切点与截距</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E5%88%86-k-0\"><span class=\"toc-text\">二分 ( k_0 )</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">代码</span></a></li></ol></li></ol></li></ol>","author":{"name":"Math-zhuxy","slug":"blog-author","avatar":"https://sse-market-source-1320172928.cos.ap-guangzhou.myqcloud.com/src/images/uploads/1728918801765528128_%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20241014222719.jpg","link":"/","description":"enjoy playing single player games","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"法国战役","uid":"9e3f215a3ac1a80702d532ae53dd204a","slug":"法国战役","date":"2024-10-15T10:19:13.000Z","updated":"2024-10-16T12:23:26.003Z","comments":true,"path":"api/articles/法国战役.json","keywords":null,"cover":null,"text":"引子二战时期的法国战役一直是人们“辱法”的最常用的例子。法国在二战中仅“坚持”了39天就投降，甚至不如苏德战场中斯大林格勒战役的一栋楼的守卫时间。自1940年5...","permalink":"/post/法国战役","photos":[],"count_time":{"symbolsCount":205,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"二战杂谈","slug":"二战杂谈","count":3,"path":"api/tags/二战杂谈.json"}],"author":{"name":"Math-zhuxy","slug":"blog-author","avatar":"https://sse-market-source-1320172928.cos.ap-guangzhou.myqcloud.com/src/images/uploads/1728918801765528128_%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20241014222719.jpg","link":"/","description":"enjoy playing single player games","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"KMP","uid":"53896b079468d4c41963b2300dea196e","slug":"KMP","date":"2024-10-14T02:54:06.000Z","updated":"2024-10-16T00:10:57.285Z","comments":true,"path":"api/articles/KMP.json","keywords":null,"cover":[],"text":"KMP简介假设有两个字符串需要匹配，此时已经匹配到i，j位置：母串：str1 … str1 a(i) …字串：str1 (j’) … str1 b(j) … 发...","permalink":"/post/KMP","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"算法","slug":"算法","count":3,"path":"api/tags/算法.json"}],"author":{"name":"Math-zhuxy","slug":"blog-author","avatar":"https://sse-market-source-1320172928.cos.ap-guangzhou.myqcloud.com/src/images/uploads/1728918801765528128_%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20241014222719.jpg","link":"/","description":"enjoy playing single player games","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}