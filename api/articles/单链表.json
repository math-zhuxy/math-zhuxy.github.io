{"title":"单链表","uid":"599e3a777e3c1f587525e8b550969355","slug":"单链表","date":"2024-10-20T12:24:58.000Z","updated":"2024-10-24T03:16:35.328Z","comments":true,"path":"api/articles/单链表.json","keywords":null,"cover":null,"content":"<p>这是一种用数组模拟链表的方法，因为在C++中new方法需要的时间较久，因此需要使用一种方式通过下标来快速的实现链表的操作。有几个关键的值和数组：<br>head表示头节点下标<br>e[i]表示下标为i的节点的值<br>ne[i]表示下标为i的节点指向的下一个节点的下标<br>idx存储我们操作的节点的下标<br><em><strong>idx表示链表中插入的第idx个节点的位置</strong></em><br>下标就是链表中的指针<br>下面给出代码模板：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">100010</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> head,e[N],ne[N],idx;</span><br><span class=\"line\"><span class=\"comment\">//head表示头节点下标</span></span><br><span class=\"line\"><span class=\"comment\">//e[i]表示下标为i的节点的值</span></span><br><span class=\"line\"><span class=\"comment\">//ne[i]表示下标为i的节点指向的下一个节点的下标</span></span><br><span class=\"line\"><span class=\"comment\">//idx存储我们操作的节点的下标</span></span><br><span class=\"line\"><span class=\"comment\">//下标就是链表中的指针</span></span><br><span class=\"line\"><span class=\"comment\">//初始化</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    head=<span class=\"number\">-1</span>;</span><br><span class=\"line\">    idx=<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//把x插到头节点</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add_head</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//第三步，把x存入新的节点</span></span><br><span class=\"line\">    <span class=\"comment\">//node-&gt;value=x;</span></span><br><span class=\"line\">    e[idx]=x;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//第一步，把新的节点指向的值变为head指向的值</span></span><br><span class=\"line\">    <span class=\"comment\">//新节点的next指针指向原本的head的next指针</span></span><br><span class=\"line\">    <span class=\"comment\">//node=new NODE();</span></span><br><span class=\"line\">    <span class=\"comment\">//node-&gt;next=head-&gt;next;</span></span><br><span class=\"line\">    ne[idx]=head;</span><br><span class=\"line\">    <span class=\"comment\">//idx这是也代表这是链表的第几个点</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//第二步，head的next指针指向idx</span></span><br><span class=\"line\">    <span class=\"comment\">//head-&gt;next=node;</span></span><br><span class=\"line\">    head=idx;</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//我的idx已经被用过了，因此我的idx移动到下一个位置</span></span><br><span class=\"line\">    idx++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//将x插入到下标为k的点的后面</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> k,<span class=\"type\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//node-&gt;value=x;</span></span><br><span class=\"line\">    e[idx]=x;</span><br><span class=\"line\">    <span class=\"comment\">//node-&gt;next=list[k]-&gt;next;</span></span><br><span class=\"line\">    ne[idx]=ne[k];</span><br><span class=\"line\">    <span class=\"comment\">//list[k]-&gt;next=node;</span></span><br><span class=\"line\">    ne[k]=idx;</span><br><span class=\"line\">    idx++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//将下标是k的点的后面的点删掉</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">remove</span><span class=\"params\">(<span class=\"type\">int</span> k)</span></span>&#123;</span><br><span class=\"line\">    ne[k]=ne[ne[k]];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> m;</span><br><span class=\"line\">    cin&gt;&gt;m;</span><br><span class=\"line\">    <span class=\"built_in\">init</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (m -- )&#123;</span><br><span class=\"line\">        <span class=\"type\">char</span> a;</span><br><span class=\"line\">        cin&gt;&gt;a;</span><br><span class=\"line\">        <span class=\"type\">int</span> k,x;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a==<span class=\"string\">&#x27;H&#x27;</span>)&#123;</span><br><span class=\"line\">            cin&gt;&gt;x;</span><br><span class=\"line\">            <span class=\"built_in\">add_head</span>(x);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(a==<span class=\"string\">&#x27;D&#x27;</span>)&#123;</span><br><span class=\"line\">            cin&gt;&gt;k;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(k==<span class=\"number\">0</span>)head=ne[head];</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"built_in\">remove</span>(k<span class=\"number\">-1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(a==<span class=\"string\">&#x27;I&#x27;</span>)&#123;</span><br><span class=\"line\">            cin&gt;&gt;k&gt;&gt;x;</span><br><span class=\"line\">            <span class=\"built_in\">add</span>(k<span class=\"number\">-1</span>,x);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = head; i != <span class=\"number\">-1</span>; i = ne[i]) cout &lt;&lt; e[i] &lt;&lt; <span class=\"string\">&#x27; &#x27;</span> ;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","feature":true,"text":"这是一种用数组模拟链表的方法，因为在C++中new方法需要的时间较久，因此需要使用一种方式通过下标来快速的实现链表的操作。有几个关键的值和数组：head表示头节...","permalink":"/post/单链表","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"算法","slug":"算法","count":10,"path":"api/tags/算法.json"}],"toc":"","author":{"name":"Math-zhuxy","slug":"blog-author","avatar":"https://sse-market-source-1320172928.cos.ap-guangzhou.myqcloud.com/src/images/uploads/1728918801765528128_%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20241014222719.jpg","link":"/","description":"Blood of the First Men, drawn by the sword.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"双链表","uid":"c47cb33c3a9e2a1822b846972febc26e","slug":"双链表","date":"2024-10-20T12:32:20.000Z","updated":"2024-10-24T08:08:08.662Z","comments":true,"path":"api/articles/双链表.json","keywords":null,"cover":null,"text":"有三个数组：e表示这个点的值是多少，l表示每个点左边的点是什么，r表示右边的点是什么，idx每次更新一个点就++；初始化：0表示左端点，1表示右端点0:head...","permalink":"/post/双链表","photos":[],"count_time":{"symbolsCount":"3.4k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"算法","slug":"算法","count":10,"path":"api/tags/算法.json"}],"author":{"name":"Math-zhuxy","slug":"blog-author","avatar":"https://sse-market-source-1320172928.cos.ap-guangzhou.myqcloud.com/src/images/uploads/1728918801765528128_%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20241014222719.jpg","link":"/","description":"Blood of the First Men, drawn by the sword.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"spfa","uid":"b15a3d80cccdf73982f5b8a5b568cf91","slug":"spfa","date":"2024-10-17T08:22:06.000Z","updated":"2024-10-18T10:05:15.879Z","comments":true,"path":"api/articles/spfa.json","keywords":null,"cover":null,"text":"分析SPFA算法仅仅只是Bellman_ford算法的一个优化。Bellman_ford算法会遍历所有的边，但是有很多的边遍历了其实没有什么意义，我们只用遍历那...","permalink":"/post/spfa","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"算法","slug":"算法","count":10,"path":"api/tags/算法.json"}],"author":{"name":"Math-zhuxy","slug":"blog-author","avatar":"https://sse-market-source-1320172928.cos.ap-guangzhou.myqcloud.com/src/images/uploads/1728918801765528128_%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20241014222719.jpg","link":"/","description":"Blood of the First Men, drawn by the sword.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}