{"title":"单调队列","uid":"0b051914180f3217ee5468b2e6dfab33","slug":"滑动窗口","date":"2024-10-22T11:49:10.000Z","updated":"2024-10-24T09:22:02.562Z","comments":true,"path":"api/articles/滑动窗口.json","keywords":null,"cover":null,"content":"<h1 id=\"入门\"><a href=\"#入门\" class=\"headerlink\" title=\"入门\"></a>入门</h1><p>有一个大小为k的滑动窗口，它从数组的的最左边移动到最右边<br>只能在窗口中看到k个数字，每次滑动窗口有向右移动一个位置。<br>确定对于滑动窗口的每个位置，输出窗口的最大值和最小值。<br>假设目前的队列排列如下：<br>1 3 -1 -5 -3<br>注意到：3比1大，因此只要3在队列中，1就不会成为最大值，而1要比3先弹出，即3在的时候1一定在，因此最大值一定不会是1，我们可以把1删掉。<br>我们删掉所有这些元素后，剩下的就是一个单调递减的队列：3 -1 -5 。我闷需要最大值只需要输出队首即可。<br>求最小值同理。<br>总的来说，单调队列有以下几点特点：</p>\n<ol>\n<li>用普通队列怎么做</li>\n<li>将队列中的冗余元素删掉</li>\n<li>队列将具有某种性质（比如单调性）</li>\n<li>可以从一个特殊的位置取出最值<br>代码如下：<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">1000010</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> arr[N],q[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> hh=<span class=\"number\">0</span>,tt=<span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> n,k;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;n,&amp;k);</span><br><span class=\"line\">    <span class=\"comment\">//cin&gt;&gt;n&gt;&gt;k;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;arr[i]);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i ++ )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(q[hh]&lt;=i-k)hh++;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(hh&lt;=tt&amp;&amp;arr[q[tt]]&gt;=arr[i])tt--;</span><br><span class=\"line\">        q[++tt]=i;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i&gt;=k<span class=\"number\">-1</span>)<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>,arr[q[hh]]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">    hh=<span class=\"number\">0</span>;tt=<span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(q[hh]&lt;=i-k)hh++;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(hh&lt;=tt&amp;&amp;arr[q[tt]]&lt;=arr[i])tt--;</span><br><span class=\"line\">        q[++tt]=i;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i&gt;=k<span class=\"number\">-1</span>)<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>,arr[q[hh]]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n","text":"入门有一个大小为k的滑动窗口，它从数组的的最左边移动到最右边只能在窗口中看到k个数字，每次滑动窗口有向右移动一个位置。确定对于滑动窗口的每个位置，输出窗口的最大...","permalink":"/post/滑动窗口","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"算法","slug":"算法","count":14,"path":"api/tags/算法.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%85%A5%E9%97%A8\"><span class=\"toc-text\">入门</span></a></li></ol>","author":{"name":"Math-zhuxy","slug":"blog-author","avatar":"https://sse-market-source-1320172928.cos.ap-guangzhou.myqcloud.com/src/images/uploads/1728918801765528128_%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20241014222719.jpg","link":"/","description":"Blood of the First Men, drawn by the sword.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"并查集","uid":"c18469ab20e7b093d36b4a61728d07eb","slug":"并查集","date":"2024-10-26T15:03:22.000Z","updated":"2024-10-26T15:35:07.973Z","comments":true,"path":"api/articles/并查集.json","keywords":null,"cover":null,"text":"简介并查集可以用来干什么的：将两个集合合并询问两个元素是否在一个集合中暴力做法：belong[x]=a表示x在集合a中，但是合并的操作很难近乎O(1)的时间复杂...","permalink":"/post/并查集","photos":[],"count_time":{"symbolsCount":938,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"算法","slug":"算法","count":14,"path":"api/tags/算法.json"}],"author":{"name":"Math-zhuxy","slug":"blog-author","avatar":"https://sse-market-source-1320172928.cos.ap-guangzhou.myqcloud.com/src/images/uploads/1728918801765528128_%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20241014222719.jpg","link":"/","description":"Blood of the First Men, drawn by the sword.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"双链表","uid":"c47cb33c3a9e2a1822b846972febc26e","slug":"双链表","date":"2024-10-20T12:32:20.000Z","updated":"2024-10-24T08:08:08.662Z","comments":true,"path":"api/articles/双链表.json","keywords":null,"cover":null,"text":"有三个数组：e表示这个点的值是多少，l表示每个点左边的点是什么，r表示右边的点是什么，idx每次更新一个点就++；初始化：0表示左端点，1表示右端点0:head...","permalink":"/post/双链表","photos":[],"count_time":{"symbolsCount":"3.4k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"算法","slug":"算法","count":14,"path":"api/tags/算法.json"}],"author":{"name":"Math-zhuxy","slug":"blog-author","avatar":"https://sse-market-source-1320172928.cos.ap-guangzhou.myqcloud.com/src/images/uploads/1728918801765528128_%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20241014222719.jpg","link":"/","description":"Blood of the First Men, drawn by the sword.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}