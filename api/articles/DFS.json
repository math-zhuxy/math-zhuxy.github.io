{"title":"DFS","uid":"cdfc7cbbb7cbed062094116ffd80f917","slug":"DFS","date":"2024-10-12T04:56:45.000Z","updated":"2024-10-15T11:38:34.349Z","comments":true,"path":"api/articles/DFS.json","keywords":null,"cover":[],"content":"<h2 id=\"DFS简介\"><a href=\"#DFS简介\" class=\"headerlink\" title=\"DFS简介\"></a>DFS简介</h2><p>DFS属于一种树的遍历方式。基本框架如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(Node a)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a==<span class=\"literal\">NULL</span>)<span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"comment\">//标记该节点为已用</span></span><br><span class=\"line\">    a.used=<span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"comment\">//a节点处理</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">check</span>(a))&#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;get answer&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//遍历该节点的其他相邻节点</span></span><br><span class=\"line\">    <span class=\"built_in\">dfs</span>(a.next_1);</span><br><span class=\"line\">    <span class=\"built_in\">dfs</span>(a.next_2);</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">    <span class=\"comment\">//回溯，标记该节点为未用状态</span></span><br><span class=\"line\">    a.used=<span class=\"literal\">false</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"为什么要回溯\"><a href=\"#为什么要回溯\" class=\"headerlink\" title=\"为什么要回溯\"></a>为什么要回溯</h2><p>以上面的代码为例，如果代码已经运行到<code>a.used=false;</code>这一行，代表前面的<code>dfs(a.next_1);dfs(a.next_2);</code>都没有找到结果，证明走到a节点其实是找不到结果的，因此需要回退会a节点的父节点继续寻找，此时要标记a节点为为使用状态。</p>\n<h2 id=\"DFS遍历顺序\"><a href=\"#DFS遍历顺序\" class=\"headerlink\" title=\"DFS遍历顺序\"></a>DFS遍历顺序</h2><p>假设有一棵树结构如下：<br><img src=\"https://img1.baidu.com/it/u=3041674008,3059483311&fm=253&fmt=auto&app=138&f=JPEG?w=522&h=453\" alt=\"树图片\"><br>以上面的代码为例，假设L点满足我们的要求遍历路径如下：<br>A-&gt;B-&gt;E-&gt;J-&gt;回溯(E)-&gt;回溯(B)-&gt;B-&gt;F-&gt;回溯(A)-&gt;C-&gt;G-&gt;K-&gt;回溯(G)-&gt;G-&gt;L-&gt;符合答案，输出<br>下面给出几道常见的DFS题目：</p>\n<h2 id=\"N皇后问题\"><a href=\"#N皇后问题\" class=\"headerlink\" title=\"N皇后问题\"></a>N皇后问题</h2><p>皇后问题是指将 n个皇后放在 n×n 的国际象棋棋盘上，使得皇后不能相互攻击到，即任意两个皇后都不能处于同一行、同一列或同一斜线上。<br>现在给定整数N ，请你输出所有的满足条件的棋子摆法。<br>代码如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">bool</span> Arr[<span class=\"number\">20</span>][<span class=\"number\">20</span>];</span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"><span class=\"type\">int</span> DirX[<span class=\"number\">4</span>]=&#123;<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">-1</span>,<span class=\"number\">-1</span>&#125;;</span><br><span class=\"line\"><span class=\"type\">int</span> DirY[<span class=\"number\">4</span>]=&#123;<span class=\"number\">1</span>,<span class=\"number\">-1</span>,<span class=\"number\">1</span>,<span class=\"number\">-1</span>&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">IsOk</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(Arr[i][y])<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> k,q;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">4</span>;i++)&#123;</span><br><span class=\"line\">        k=x;</span><br><span class=\"line\">        q=y;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(k&gt;=<span class=\"number\">1</span>&amp;&amp;k&lt;=n&amp;&amp;q&gt;=<span class=\"number\">1</span>&amp;&amp;q&lt;=n)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(Arr[k][q])<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            k+=DirX[i];</span><br><span class=\"line\">            q+=DirY[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> num)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(num&gt;n)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;num;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;num;j++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(Arr[i][j])<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Q&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;.&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=n;j++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">IsOk</span>(num,j))&#123;</span><br><span class=\"line\">            Arr[num][j]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"built_in\">dfs</span>(num<span class=\"number\">+1</span>);</span><br><span class=\"line\">            Arr[num][j]=<span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;n);</span><br><span class=\"line\">    <span class=\"built_in\">dfs</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","text":"DFS简介DFS属于一种树的遍历方式。基本框架如下： 1234567891011121314151617#include<iostream>using name...","permalink":"/post/DFS","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"算法","slug":"算法","count":3,"path":"api/tags/算法.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#DFS%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">DFS简介</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%9B%9E%E6%BA%AF\"><span class=\"toc-text\">为什么要回溯</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#DFS%E9%81%8D%E5%8E%86%E9%A1%BA%E5%BA%8F\"><span class=\"toc-text\">DFS遍历顺序</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#N%E7%9A%87%E5%90%8E%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">N皇后问题</span></a></li></ol>","author":{"name":"Math-zhuxy","slug":"blog-author","avatar":"https://sse-market-source-1320172928.cos.ap-guangzhou.myqcloud.com/src/images/uploads/1728918801765528128_%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20241014222719.jpg","link":"/","description":"enjoy playing single player games","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"KMP","uid":"53896b079468d4c41963b2300dea196e","slug":"KMP","date":"2024-10-14T02:54:06.000Z","updated":"2024-10-14T12:32:09.441Z","comments":true,"path":"api/articles/KMP.json","keywords":null,"cover":[],"text":"KMP简介假设有两个字符串需要匹配，此时已经匹配到i，j位置：母串：str1 … str1 a(i) …字串：str1 (j’) … str1 b(j) … 发...","permalink":"/post/KMP","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"算法","slug":"算法","count":3,"path":"api/tags/算法.json"}],"author":{"name":"Math-zhuxy","slug":"blog-author","avatar":"https://sse-market-source-1320172928.cos.ap-guangzhou.myqcloud.com/src/images/uploads/1728918801765528128_%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20241014222719.jpg","link":"/","description":"enjoy playing single player games","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"欢迎","uid":"07311a8ec5a05f13261d3a44658af323","slug":"welcome","date":"2024-10-12T03:00:46.000Z","updated":"2024-10-13T11:07:17.850Z","comments":true,"path":"api/articles/welcome.json","keywords":null,"cover":null,"text":"网站简介这是我自己做的一个博客网站。博客框架是hexo，用来github提供的域名。目前没想好写什么东西，大概会写一些算法教程之类的东西。 ","permalink":"/post/welcome","photos":[],"count_time":{"symbolsCount":70,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"网站简介","slug":"网站简介","count":1,"path":"api/tags/网站简介.json"}],"author":{"name":"Math-zhuxy","slug":"blog-author","avatar":"https://sse-market-source-1320172928.cos.ap-guangzhou.myqcloud.com/src/images/uploads/1728918801765528128_%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20241014222719.jpg","link":"/","description":"enjoy playing single player games","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}