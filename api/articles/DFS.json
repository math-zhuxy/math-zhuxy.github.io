{"title":"DFS","uid":"cdfc7cbbb7cbed062094116ffd80f917","slug":"DFS","date":"2024-10-12T04:56:45.000Z","updated":"2024-10-16T09:14:01.099Z","comments":true,"path":"api/articles/DFS.json","keywords":null,"cover":[],"content":"<h2 id=\"DFS简介\"><a href=\"#DFS简介\" class=\"headerlink\" title=\"DFS简介\"></a>DFS简介</h2><p>DFS属于一种树的遍历方式。基本框架如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(Node a)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a==<span class=\"literal\">NULL</span>)<span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"comment\">//标记该节点为已用</span></span><br><span class=\"line\">    a.used=<span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"comment\">//a节点处理</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">check</span>(a))&#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;get answer&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//遍历该节点的其他相邻节点</span></span><br><span class=\"line\">    <span class=\"built_in\">dfs</span>(a.next_1);</span><br><span class=\"line\">    <span class=\"built_in\">dfs</span>(a.next_2);</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">    <span class=\"comment\">//回溯，标记该节点为未用状态</span></span><br><span class=\"line\">    a.used=<span class=\"literal\">false</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"为什么要回溯\"><a href=\"#为什么要回溯\" class=\"headerlink\" title=\"为什么要回溯\"></a>为什么要回溯</h2><p>以上面的代码为例，如果代码已经运行到<code>a.used=false;</code>这一行，代表前面的<code>dfs(a.next_1);dfs(a.next_2);</code>都没有找到结果，证明走到a节点其实是找不到结果的，因此需要回退会a节点的父节点继续寻找，此时要标记a节点为为使用状态。</p>\n<h2 id=\"DFS遍历顺序\"><a href=\"#DFS遍历顺序\" class=\"headerlink\" title=\"DFS遍历顺序\"></a>DFS遍历顺序</h2><p>假设有一棵树结构如下：<br><img src=\"https://img1.baidu.com/it/u=3041674008,3059483311&fm=253&fmt=auto&app=138&f=JPEG?w=522&h=453\" alt=\"树图片\"><br>以上面的代码为例，假设L点满足我们的要求遍历路径如下：<br>A-&gt;B-&gt;E-&gt;J-&gt;回溯(E)-&gt;回溯(B)-&gt;B-&gt;F-&gt;回溯(A)-&gt;C-&gt;G-&gt;K-&gt;回溯(G)-&gt;G-&gt;L-&gt;符合答案，输出<br>下面给出几道常见的DFS题目：</p>\n<h2 id=\"N皇后问题\"><a href=\"#N皇后问题\" class=\"headerlink\" title=\"N皇后问题\"></a>N皇后问题</h2><p>皇后问题是指将 n个皇后放在 n×n 的国际象棋棋盘上，使得皇后不能相互攻击到，即任意两个皇后都不能处于同一行、同一列或同一斜线上。<br>现在给定整数N ，请你输出所有的满足条件的棋子摆法。<br>代码如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">bool</span> Arr[<span class=\"number\">20</span>][<span class=\"number\">20</span>];</span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"><span class=\"type\">int</span> DirX[<span class=\"number\">4</span>]=&#123;<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">-1</span>,<span class=\"number\">-1</span>&#125;;</span><br><span class=\"line\"><span class=\"type\">int</span> DirY[<span class=\"number\">4</span>]=&#123;<span class=\"number\">1</span>,<span class=\"number\">-1</span>,<span class=\"number\">1</span>,<span class=\"number\">-1</span>&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">IsOk</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(Arr[i][y])<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> k,q;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">4</span>;i++)&#123;</span><br><span class=\"line\">        k=x;</span><br><span class=\"line\">        q=y;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(k&gt;=<span class=\"number\">1</span>&amp;&amp;k&lt;=n&amp;&amp;q&gt;=<span class=\"number\">1</span>&amp;&amp;q&lt;=n)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(Arr[k][q])<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            k+=DirX[i];</span><br><span class=\"line\">            q+=DirY[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> num)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(num&gt;n)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;num;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;num;j++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(Arr[i][j])<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Q&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;.&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=n;j++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">IsOk</span>(num,j))&#123;</span><br><span class=\"line\">            Arr[num][j]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"built_in\">dfs</span>(num<span class=\"number\">+1</span>);</span><br><span class=\"line\">            Arr[num][j]=<span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;n);</span><br><span class=\"line\">    <span class=\"built_in\">dfs</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"小试牛刀\"><a href=\"#小试牛刀\" class=\"headerlink\" title=\"小试牛刀\"></a>小试牛刀</h2><h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>这些天，兔兔和蛋蛋喜欢上了一种新的棋类游戏。</p>\n<p>这个游戏是在一个 $n$ 行 $m$ 列的棋盘上进行的。游戏开始之前，棋盘上有一个格子是空的，其它的格子中都放置了一枚棋子，棋子或者是黑色，或者是白色。</p>\n<p>每一局游戏总是兔兔先操作，之后双方轮流操作，具体操作为：</p>\n<ul>\n<li>兔兔每次操作时，选择一枚与空格相邻的白色棋子，将它移进空格。</li>\n<li>蛋蛋每次操作时，选择一枚与空格相邻的黑色棋子，将它移进空格。</li>\n</ul>\n<p>第一个不能按照规则操作的人输掉游戏。为了描述方便，下面将操作“将第x行第y列中的棋子移进空格中”记为 $M(x,y)$。</p>\n<p>例如下面是三个游戏的例子。</p>\n<p><img src=\"https://cdn.luogu.com.cn/upload/image_hosting/6wfmhuf2.png\"></p>\n<p><img src=\"https://cdn.luogu.com.cn/upload/image_hosting/j7vox6n7.png\"></p>\n<p><img src=\"https://cdn.luogu.com.cn/upload/image_hosting/er1t5wpb.png\"></p>\n<p>最近兔兔总是输掉游戏，而且蛋蛋格外嚣张，于是兔兔想请她的好朋友——你——来帮助她。她带来了一局输给蛋蛋的游戏的实录，请你指出这一局游戏中所有她“犯错误”的地方。</p>\n<p>注意：</p>\n<ul>\n<li>两个格子相邻当且仅当它们有一条公共边。</li>\n<li>兔兔的操作是“犯错误”的，当且仅当，在这次操作前兔兔有必胜策略，而这次操作后蛋蛋有必胜策略。</li>\n</ul>\n<h4 id=\"输入格式\"><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h4><p>输入的第一行包含两个正整数 $n,m$。</p>\n<p>接下来 $n$ 行描述初始棋盘。其中第 $i$ 行包含 $m$ 个字符，每个字符都是大写英文字母 <code>X</code>、大写英文字母 <code>O</code> 或点号 <code>.</code> 之一，分别表示对应的棋盘格中有黑色棋子、有白色棋子和没有棋子。其中点号 <code>.</code> 恰好出现一次。</p>\n<p>接下来一行包含一个整数 $k$（$1\\leq k\\leq 1000$） ，表示兔兔和蛋蛋各进行了 $k$ 次操作。</p>\n<p>接下来 $2k$ 行描述一局游戏的过程。其中第 $2i - 1$ 行是兔兔的第 $i$ 次操作（编号为 $i$ 的操作） ，第 $2i$ 行是蛋蛋的第 $i$ 次操作。每个操作使用两个整数 $x,y$ 来描述，表示将第 $x$ 行第 $y$ 列中的棋子移进空格中。</p>\n<p>输入保证整个棋盘中只有一个格子没有棋子， 游戏过程中兔兔和蛋蛋的每个操作都是合法的，且最后蛋蛋获胜。</p>\n<h4 id=\"输出格式\"><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h4><p>输出文件的第一行包含一个整数 $r$，表示兔兔犯错误的总次数。</p>\n<p>接下来 $r$ 行按递增的顺序给出兔兔“犯错误”的操作编号。其中第 $i$ 行包含一个整数 $a_i$ 表示兔兔第 $i$ 个犯错误的操作是他在游戏中的第 $a_i$ 次操作。</p>\n<h3 id=\"样例-1\"><a href=\"#样例-1\" class=\"headerlink\" title=\"样例 #1\"></a>样例 #1</h3><h4 id=\"样例输入-1\"><a href=\"#样例输入-1\" class=\"headerlink\" title=\"样例输入 #1\"></a>样例输入 #1</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 6 </span><br><span class=\"line\">XO.OXO </span><br><span class=\"line\">1 </span><br><span class=\"line\">1 2 </span><br><span class=\"line\">1 1</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"样例输出-1\"><a href=\"#样例输出-1\" class=\"headerlink\" title=\"样例输出 #1\"></a>样例输出 #1</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"样例-2\"><a href=\"#样例-2\" class=\"headerlink\" title=\"样例 #2\"></a>样例 #2</h3><h4 id=\"样例输入-2\"><a href=\"#样例输入-2\" class=\"headerlink\" title=\"样例输入 #2\"></a>样例输入 #2</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3 3 </span><br><span class=\"line\">XOX </span><br><span class=\"line\">O.O </span><br><span class=\"line\">XOX </span><br><span class=\"line\">4 </span><br><span class=\"line\">2 3 </span><br><span class=\"line\">1 3 </span><br><span class=\"line\">1 2 </span><br><span class=\"line\">1 1 </span><br><span class=\"line\">2 1 </span><br><span class=\"line\">3 1 </span><br><span class=\"line\">3 2 </span><br><span class=\"line\">3 3</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"样例输出-2\"><a href=\"#样例输出-2\" class=\"headerlink\" title=\"样例输出 #2\"></a>样例输出 #2</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"样例-3\"><a href=\"#样例-3\" class=\"headerlink\" title=\"样例 #3\"></a>样例 #3</h3><h4 id=\"样例输入-3\"><a href=\"#样例输入-3\" class=\"headerlink\" title=\"样例输入 #3\"></a>样例输入 #3</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4 4 </span><br><span class=\"line\">OOXX </span><br><span class=\"line\">OXXO </span><br><span class=\"line\">OO.O </span><br><span class=\"line\">XXXO </span><br><span class=\"line\">2 </span><br><span class=\"line\">3 2 </span><br><span class=\"line\">2 2 </span><br><span class=\"line\">1 2 </span><br><span class=\"line\">1 3</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"样例输出-3\"><a href=\"#样例输出-3\" class=\"headerlink\" title=\"样例输出 #3\"></a>样例输出 #3</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2</span><br><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"提示\"><a href=\"#提示\" class=\"headerlink\" title=\"提示\"></a>提示</h3><p>对于 $100%$ 的数据，$1\\leq n\\leq 40$，$1 \\leq m\\leq 40$，$1\\leq k\\leq 1000$。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">测试点编号</th>\n<th align=\"center\">$n$</th>\n<th align=\"center\">$m$</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">$1,2$</td>\n<td align=\"center\">$n&#x3D;1$</td>\n<td align=\"center\">$1\\leq m\\leq 20$</td>\n</tr>\n<tr>\n<td align=\"center\">$3$</td>\n<td align=\"center\">$n&#x3D;3$</td>\n<td align=\"center\">$m&#x3D;4$</td>\n</tr>\n<tr>\n<td align=\"center\">$4,5$</td>\n<td align=\"center\">$n&#x3D;4$</td>\n<td align=\"center\">$m&#x3D;4$</td>\n</tr>\n<tr>\n<td align=\"center\">$6,7$</td>\n<td align=\"center\">$n&#x3D;4$</td>\n<td align=\"center\">$m&#x3D;5$</td>\n</tr>\n<tr>\n<td align=\"center\">$8$</td>\n<td align=\"center\">$n&#x3D;3$</td>\n<td align=\"center\">$m&#x3D;7$</td>\n</tr>\n<tr>\n<td align=\"center\">$9\\sim 14$</td>\n<td align=\"center\">$n&#x3D;2$</td>\n<td align=\"center\">$1\\leq m\\leq 40$</td>\n</tr>\n<tr>\n<td align=\"center\">$15,16$</td>\n<td align=\"center\">$1\\leq n\\leq 16$</td>\n<td align=\"center\">$1\\leq m\\leq 16$</td>\n</tr>\n<tr>\n<td align=\"center\">$17\\sim 20$</td>\n<td align=\"center\">$1\\leq n\\leq 40$</td>\n<td align=\"center\">$1\\leq m\\leq 40$</td>\n</tr>\n</tbody></table>\n<h3 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h3><h4 id=\"前置知识\"><a href=\"#前置知识\" class=\"headerlink\" title=\"前置知识\"></a>前置知识</h4><p>对于二分图博弈，先手如果率先落入最大匹配的点x中，那么后手只需要选择与x匹配的点y走即可，走到最后先手必败；<br>如果是完全匹配，那么先手无论落子何处，均率先落入最大匹配点，先手必败；<br>如果不是完全匹配，先手选择非最大匹配点x落子，那么后手无论落子何处，都是最大匹配中的某点y， 因为如果y不是最大匹配的点, 则x到y形成增广路，最大匹配的边数还可以加1，导致矛盾；进而， 后手率先落入最大匹配的点中，先手有必胜策略；</p>\n<h4 id=\"本题策略\"><a href=\"#本题策略\" class=\"headerlink\" title=\"本题策略\"></a>本题策略</h4><ol>\n<li>把棋子的移动视为空格的移动，那么兔兔先手移动空格到白子处，因此可以将空格看作黑色， 黑白染色，建二分图；<br>如果在移动空格前，空格处于最大匹配的非必须点，那么移动后必然率先进入最大匹配中，必败，反之有必胜策略；</li>\n<li>对于K轮游戏，第i轮游戏时空格的位置cur在(sx, sy), 如果cur不在最大匹配中，那么落子后必落入最大匹配， 所以无论怎么落子，必败；</li>\n<li>如果cur在最大匹配中,且有匹配match[cur]为nxt，那么删掉cur后从nxt跑匈牙利算法（用于计算最小生成树），看nxt是否还能有另外的匹配，如果有 那么cur就不是最大匹配的必须点，有必胜策略，反之仍然必败；对每1轮游戏重复操作，得到每1轮游戏的胜负情况win[i]；</li>\n<li>如何判断兔兔犯了错误？——如果win[i]是必胜，而兔兔走完之后win[i+1]必胜，那么就说明兔兔犯了错；</li>\n</ol>\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">50</span>, K = <span class=\"number\">1005</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> n, m, ans, cnt, tot, head[N*N];</span><br><span class=\"line\"><span class=\"type\">char</span> g[N][N];</span><br><span class=\"line\"><span class=\"type\">int</span> match[N*N], res[K*<span class=\"number\">2</span>], win[K*<span class=\"number\">2</span>]; </span><br><span class=\"line\"><span class=\"type\">bool</span> vis[N*N], block[N*N], color[N][N];</span><br><span class=\"line\"><span class=\"type\">int</span> dx[<span class=\"number\">4</span>] = &#123;<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">-1</span>&#125;;</span><br><span class=\"line\"><span class=\"type\">int</span> dy[<span class=\"number\">4</span>] = &#123;<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">-1</span>, <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">node</span> </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> to, nxt;</span><br><span class=\"line\">&#125;edge[N*N*<span class=\"number\">2</span>*<span class=\"number\">4</span>]; <span class=\"comment\">//每个点连4个方向，双向边 </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">addedge</span><span class=\"params\">(<span class=\"type\">int</span> s, <span class=\"type\">int</span> e)</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cnt++;</span><br><span class=\"line\">    edge[cnt].to = e;</span><br><span class=\"line\">    edge[cnt].nxt = head[s];</span><br><span class=\"line\">    head[s] = cnt;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> <span class=\"comment\">//匈牙利算法</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = head[x]; i != <span class=\"number\">0</span>; i = edge[i].nxt) </span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> y = edge[i].to;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(block[y] == <span class=\"literal\">true</span>) <span class=\"comment\">//添加一行屏蔽已删掉的点 </span></span><br><span class=\"line\">        \t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(vis[y] == <span class=\"literal\">false</span>) </span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">            vis[y] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//如果y没有匹配 或者 y的匹配点match[y]能找到一个新的匹配</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(match[y] == <span class=\"number\">0</span> || <span class=\"built_in\">dfs</span>(match[y]) == <span class=\"literal\">true</span>) </span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">                match[y] = x; <span class=\"comment\">//y的配对点是x</span></span><br><span class=\"line\">                match[x] = y; <span class=\"comment\">//增加这行代码的原因是为了找最大匹配非必须点</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">get_id</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (x<span class=\"number\">-1</span>) * m + y;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">check</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(x &lt; <span class=\"number\">1</span> || x &gt; n || y &lt; <span class=\"number\">1</span> || y &gt; m || color[x][y] == <span class=\"literal\">false</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//输入 </span></span><br><span class=\"line\">\tcin &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= m; j++)</span><br><span class=\"line\">\t\t\tcin &gt;&gt; g[i][j]; <span class=\"comment\">//迷宫数组 </span></span><br><span class=\"line\">\t<span class=\"comment\">//染色</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> sx, sy;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= m; j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        \t<span class=\"keyword\">if</span>(g[i][j] == <span class=\"string\">&#x27;O&#x27;</span>) <span class=\"comment\">//将白色的棋子染色 </span></span><br><span class=\"line\">        \t&#123;</span><br><span class=\"line\">        \t\tcolor[i][j] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        \t&#125;</span><br><span class=\"line\">        \t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(g[i][j] == <span class=\"string\">&#x27;.&#x27;</span>) <span class=\"comment\">//起点记录，当作黑色对待 </span></span><br><span class=\"line\">        \t&#123;</span><br><span class=\"line\">        \t\tsx = i;</span><br><span class=\"line\">        \t\tsy = j;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">    <span class=\"comment\">//建图 </span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= m; j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        \t<span class=\"keyword\">if</span>(color[i][j] == <span class=\"literal\">true</span>) <span class=\"comment\">//白子跳过 </span></span><br><span class=\"line\">        \t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        \t<span class=\"type\">int</span> cur = <span class=\"built_in\">get_id</span>(i, j); <span class=\"comment\">//当前点编号 </span></span><br><span class=\"line\">        \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> k = <span class=\"number\">0</span>; k &lt; <span class=\"number\">4</span>; k++)</span><br><span class=\"line\">        \t&#123;</span><br><span class=\"line\">        \t\t<span class=\"type\">int</span> nx = i + dx[k];</span><br><span class=\"line\">        \t\t<span class=\"type\">int</span> ny = j + dy[k];</span><br><span class=\"line\">        \t\t<span class=\"keyword\">if</span>(<span class=\"built_in\">check</span>(nx, ny) == <span class=\"literal\">false</span>)</span><br><span class=\"line\">        \t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        \t\t<span class=\"type\">int</span> nxt = <span class=\"built_in\">get_id</span>(nx, ny);</span><br><span class=\"line\">        \t\t<span class=\"built_in\">addedge</span>(cur, nxt); <span class=\"comment\">//建边 </span></span><br><span class=\"line\">        \t\t<span class=\"built_in\">addedge</span>(nxt, cur); <span class=\"comment\">//找最大匹配不需要反边，但是找最大匹配非必须点需要折返跑 </span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//匈牙利, 目的是看起点是否落在最大匹配中 </span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= m; j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        \t<span class=\"keyword\">if</span>(color[i][j] == <span class=\"literal\">false</span>)</span><br><span class=\"line\">        \t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        \t<span class=\"built_in\">memset</span>(vis, <span class=\"number\">0</span>, <span class=\"built_in\">sizeof</span>(vis));</span><br><span class=\"line\">        \t<span class=\"type\">int</span> cur = <span class=\"built_in\">get_id</span>(i, j); </span><br><span class=\"line\">        \t<span class=\"keyword\">if</span>(<span class=\"built_in\">dfs</span>(cur) == <span class=\"literal\">true</span>) </span><br><span class=\"line\">\t\t\t\tans++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//输入游戏过程 </span></span><br><span class=\"line\">\t<span class=\"type\">int</span> k; </span><br><span class=\"line\">\tcin &gt;&gt; k;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">2</span>*k; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> cur = <span class=\"built_in\">get_id</span>(sx, sy);</span><br><span class=\"line\">\t\tblock[cur] = <span class=\"literal\">true</span>; <span class=\"comment\">//删掉cur </span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(match[cur] == <span class=\"number\">0</span>) <span class=\"comment\">//棋子当前不在匹配中，那么下一步会率先走到最大匹配中，必败 </span></span><br><span class=\"line\">\t\t\twin[i] = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> nxt =  match[cur];</span><br><span class=\"line\">\t\t\tmatch[cur] = match[nxt] = <span class=\"number\">0</span>;  <span class=\"comment\">//删掉cur与 nxt的匹配关系 </span></span><br><span class=\"line\">\t\t\t<span class=\"built_in\">memset</span>(vis, <span class=\"number\">0</span>, <span class=\"built_in\">sizeof</span>(vis)); <span class=\"comment\">//跑匈牙利记得清0 vis </span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(<span class=\"built_in\">dfs</span>(nxt) == <span class=\"literal\">true</span>) <span class=\"comment\">//若nxt还能找到匹配，则cur不是最大匹配必须, 那么下一步率先走到最大匹配，必败 </span></span><br><span class=\"line\">\t\t\t\twin[i] = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t\twin[i] = <span class=\"literal\">true</span>; </span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tcin &gt;&gt; sx &gt;&gt; sy;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//处理输出 </span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= k; i++) </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(win[<span class=\"number\">2</span>*i<span class=\"number\">-1</span>] == <span class=\"literal\">true</span> &amp;&amp; win[<span class=\"number\">2</span>*i] == <span class=\"literal\">true</span>) <span class=\"comment\">//兔兔走之前是有必胜策略，走完蛋蛋有必胜策略 </span></span><br><span class=\"line\">    \t&#123;</span><br><span class=\"line\">    \t\tres[++tot] = i; </span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcout &lt;&lt; tot &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= tot; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; res[i] &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","text":"DFS简介DFS属于一种树的遍历方式。基本框架如下： 1234567891011121314151617#include<iostream>using name...","permalink":"/post/DFS","photos":[],"count_time":{"symbolsCount":"7.7k","symbolsTime":"7 mins."},"categories":[],"tags":[{"name":"算法","slug":"算法","count":3,"path":"api/tags/算法.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#DFS%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">DFS简介</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%9B%9E%E6%BA%AF\"><span class=\"toc-text\">为什么要回溯</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#DFS%E9%81%8D%E5%8E%86%E9%A1%BA%E5%BA%8F\"><span class=\"toc-text\">DFS遍历顺序</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#N%E7%9A%87%E5%90%8E%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">N皇后问题</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B0%8F%E8%AF%95%E7%89%9B%E5%88%80\"><span class=\"toc-text\">小试牛刀</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0\"><span class=\"toc-text\">题目描述</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%85%A5%E6%A0%BC%E5%BC%8F\"><span class=\"toc-text\">输入格式</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%87%BA%E6%A0%BC%E5%BC%8F\"><span class=\"toc-text\">输出格式</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A0%B7%E4%BE%8B-1\"><span class=\"toc-text\">样例 #1</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%A0%B7%E4%BE%8B%E8%BE%93%E5%85%A5-1\"><span class=\"toc-text\">样例输入 #1</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%A0%B7%E4%BE%8B%E8%BE%93%E5%87%BA-1\"><span class=\"toc-text\">样例输出 #1</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A0%B7%E4%BE%8B-2\"><span class=\"toc-text\">样例 #2</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%A0%B7%E4%BE%8B%E8%BE%93%E5%85%A5-2\"><span class=\"toc-text\">样例输入 #2</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%A0%B7%E4%BE%8B%E8%BE%93%E5%87%BA-2\"><span class=\"toc-text\">样例输出 #2</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A0%B7%E4%BE%8B-3\"><span class=\"toc-text\">样例 #3</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%A0%B7%E4%BE%8B%E8%BE%93%E5%85%A5-3\"><span class=\"toc-text\">样例输入 #3</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%A0%B7%E4%BE%8B%E8%BE%93%E5%87%BA-3\"><span class=\"toc-text\">样例输出 #3</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8F%90%E7%A4%BA\"><span class=\"toc-text\">提示</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%A2%98%E8%A7%A3\"><span class=\"toc-text\">题解</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86\"><span class=\"toc-text\">前置知识</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%9C%AC%E9%A2%98%E7%AD%96%E7%95%A5\"><span class=\"toc-text\">本题策略</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">代码</span></a></li></ol></li></ol></li></ol>","author":{"name":"Math-zhuxy","slug":"blog-author","avatar":"https://sse-market-source-1320172928.cos.ap-guangzhou.myqcloud.com/src/images/uploads/1728918801765528128_%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20241014222719.jpg","link":"/","description":"enjoy playing single player games","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"KMP","uid":"53896b079468d4c41963b2300dea196e","slug":"KMP","date":"2024-10-14T02:54:06.000Z","updated":"2024-10-16T00:10:57.285Z","comments":true,"path":"api/articles/KMP.json","keywords":null,"cover":[],"text":"KMP简介假设有两个字符串需要匹配，此时已经匹配到i，j位置：母串：str1 … str1 a(i) …字串：str1 (j’) … str1 b(j) … 发...","permalink":"/post/KMP","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"算法","slug":"算法","count":3,"path":"api/tags/算法.json"}],"author":{"name":"Math-zhuxy","slug":"blog-author","avatar":"https://sse-market-source-1320172928.cos.ap-guangzhou.myqcloud.com/src/images/uploads/1728918801765528128_%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20241014222719.jpg","link":"/","description":"enjoy playing single player games","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"欢迎","uid":"07311a8ec5a05f13261d3a44658af323","slug":"welcome","date":"2024-10-12T03:00:46.000Z","updated":"2024-10-13T11:07:17.850Z","comments":true,"path":"api/articles/welcome.json","keywords":null,"cover":null,"text":"网站简介这是我自己做的一个博客网站。博客框架是hexo，用来github提供的域名。目前没想好写什么东西，大概会写一些算法教程之类的东西。 ","permalink":"/post/welcome","photos":[],"count_time":{"symbolsCount":70,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"网站简介","slug":"网站简介","count":1,"path":"api/tags/网站简介.json"}],"author":{"name":"Math-zhuxy","slug":"blog-author","avatar":"https://sse-market-source-1320172928.cos.ap-guangzhou.myqcloud.com/src/images/uploads/1728918801765528128_%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20241014222719.jpg","link":"/","description":"enjoy playing single player games","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}